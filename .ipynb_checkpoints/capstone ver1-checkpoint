{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Capstone Project - The Battle of Neighbourhoods\n",
    "\n",
    "## Import Libraries\n",
    "\n",
    "We will import all the necessary libraries that will require to read and process the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Libraries imported\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd    #to read the data and perform basic dataframe operation\n",
    "import numpy as np     #to perform scientific computing\n",
    "\n",
    "#installing geopy for geolocating\n",
    "#!conda install -c conda-forge geopy --yes\n",
    "from geopy import geocoders\n",
    "import urllib.request\n",
    "import requests\n",
    "\n",
    "#importing modules relating to matplotlib\n",
    "import matplotlib.cm as cm    #for generating colors for clusters\n",
    "import matplotlib.colors as colors\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#for plotting on map\n",
    "import folium\n",
    "\n",
    "#importing KMeans algorithm\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "print(\"Libraries imported\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploring Dataset\n",
    "\n",
    "Data \"delhi_dataSet.csv\" has 9 boroughs and 175 neighbourhoods. In order to segment the neighbourhoods and explore them. Dataset also contains the lattitude and longitude of all the locations in the neighbourhood.\n",
    "\n",
    "The data exists for free on Kaggle. Feel free to donwload the dataset from the link:\n",
    "\n",
    "https://www.kaggle.com/shaswatd673/delhi-neighborhood-data#restaurant_dataSet.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Adarsh Nagar</td>\n",
       "      <td>28.614192</td>\n",
       "      <td>77.071541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Ashok Vihar</td>\n",
       "      <td>28.699453</td>\n",
       "      <td>77.184826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Azadpur</td>\n",
       "      <td>28.707657</td>\n",
       "      <td>77.175547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Bawana</td>\n",
       "      <td>28.799660</td>\n",
       "      <td>77.032885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Begum Pur</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0           Borough  Neighborhood   latitude  longitude\n",
       "0           0  North West Delhi  Adarsh Nagar  28.614192  77.071541\n",
       "1           1  North West Delhi   Ashok Vihar  28.699453  77.184826\n",
       "2           2  North West Delhi       Azadpur  28.707657  77.175547\n",
       "3           3  North West Delhi        Bawana  28.799660  77.032885\n",
       "4           4  North West Delhi     Begum Pur        NaN        NaN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#using pandas to access the dataframe and convert it into a pandas dataframe\n",
    "data = pd.read_csv(\"delhi_dataSet.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see first column \"unnamed: 0\" is of no use so we can drop it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.drop(['Unnamed: 0'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Adarsh Nagar</td>\n",
       "      <td>28.614192</td>\n",
       "      <td>77.071541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Ashok Vihar</td>\n",
       "      <td>28.699453</td>\n",
       "      <td>77.184826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Azadpur</td>\n",
       "      <td>28.707657</td>\n",
       "      <td>77.175547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Bawana</td>\n",
       "      <td>28.799660</td>\n",
       "      <td>77.032885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>North West Delhi</td>\n",
       "      <td>Begum Pur</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Borough  Neighborhood   latitude  longitude\n",
       "0  North West Delhi  Adarsh Nagar  28.614192  77.071541\n",
       "1  North West Delhi   Ashok Vihar  28.699453  77.184826\n",
       "2  North West Delhi       Azadpur  28.707657  77.175547\n",
       "3  North West Delhi        Bawana  28.799660  77.032885\n",
       "4  North West Delhi     Begum Pur        NaN        NaN"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will find the geographical coordinates of New Delhi and save its Latitude and Longitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The geographical coordinate of New Delhi City are 28.6141793,77.2022662.\n"
     ]
    }
   ],
   "source": [
    "address = 'New Delhi'\n",
    "\n",
    "geolocator = geocoders.Nominatim(user_agent='Delhi_explorer')\n",
    "location = geolocator.geocode(address)\n",
    "latitude = location.latitude\n",
    "longitude = location.longitude\n",
    "\n",
    "print('The geographical coordinate of New Delhi City are {},{}.'.format(latitude,longitude))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating a map of New delhi with neighbourhoods superimposed on top"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(45, 4)\n"
     ]
    }
   ],
   "source": [
    "south_delhi_data = data[data['Borough']=='South Delhi'].reset_index(drop = True)\n",
    "south_delhi_data=south_delhi_data.dropna(subset=['longitude'])\n",
    "south_delhi_data=south_delhi_data.dropna(subset=['latitude'])\n",
    "\n",
    "south_delhi_data.head()\n",
    "print(south_delhi_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1718e424488>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import folium\n",
    "#create map of New Delhi using Latitude and Longitude values\n",
    "delhi_map = folium.Map([latitude,longitude], zoom_start=11)\n",
    "\n",
    "#add members\n",
    "for lat, lng, borough, neighbourhood in zip(south_delhi_data['latitude'],south_delhi_data['longitude'],south_delhi_data['Borough'],south_delhi_data['Neighborhood']):\n",
    "    label = '{},{}'.format(neighbourhood,borough)\n",
    "    label = folium.Popup(label,parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "    [lat,lng],\n",
    "    radius=5,\n",
    "    popup=label,\n",
    "    color = 'blue',\n",
    "    fill = True,\n",
    "    fill_color = '#3186cc',\n",
    "    fill_opacity = 0.7,\n",
    "    parse_html = False).add_to(delhi_map)\n",
    "    \n",
    "delhi_map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Foursquare venues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The following function retrieves the venues given the names and coordinates and stores it into dataframe.\n",
    "def getNearbyVenues(names, latitudes, longitudes, radius=500,categoryIds = ''):\n",
    "    try: \n",
    "        venues_list=[]\n",
    "        for name, lat, long in zip(names, latitudes, longitudes):\n",
    "            #print(name)\n",
    "            # create the API request URL\n",
    "            url = 'https://api.foursquare.com/v2/venues/search?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, VERSION, lat, lng, radius, LIMIT)\n",
    "            if (categoryIds != ''):\n",
    "                    url = url + '&categoryId={}'\n",
    "                    url = url.format(categoryIds)\n",
    "\n",
    "            # make the GET request\n",
    "            response = requests.get(url).json()\n",
    "            results = response[\"response\"]['venues']\n",
    "\n",
    "              # return only relevant information for each nearby venue\n",
    "            for v in results:\n",
    "                success = False\n",
    "                try:\n",
    "                    category = v['categories'][0]['name']\n",
    "                    success = True\n",
    "                except:\n",
    "                    pass\n",
    "\n",
    "                if success:\n",
    "                    venues_list.append([(\n",
    "                        name, \n",
    "                        lat, \n",
    "                        lng, \n",
    "                        v['name'], \n",
    "                        v['location']['lat'], \n",
    "                        v['location']['lng'],\n",
    "                        v['categories'][0]['name']\n",
    "                     )])\n",
    "\n",
    "            nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n",
    "            nearby_venues.columns = ['Neighborhood', \n",
    "                      'Neighborhood Latitude', \n",
    "                      'Neighborhood Longitude', \n",
    "                      'Venue', \n",
    "                      'Venue Latitude', \n",
    "                      'Venue Longitude',  \n",
    "                      'Venue Category']\n",
    "\n",
    "    except:\n",
    "        print(url)\n",
    "        print(response)\n",
    "        print(results)\n",
    "        print(nearby_venues)\n",
    "\n",
    "    return(nearby_venues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your credentails:\n",
      "CLIENT_ID: GIW5UMML5MUTOZI20KD45YDCPG0QRYXMWVTEXGUL2UZNBSES\n",
      "CLIENT_SECRET:2M4VMXELZZBZDPFCX2CP2EZH2GNEOPQHMX2BKRWLT5LY3RRE\n",
      "LIMIT:30\n",
      "Radius:500\n"
     ]
    }
   ],
   "source": [
    "CLIENT_ID = 'GIW5UMML5MUTOZI20KD45YDCPG0QRYXMWVTEXGUL2UZNBSES' # your Foursquare ID\n",
    "CLIENT_SECRET = '2M4VMXELZZBZDPFCX2CP2EZH2GNEOPQHMX2BKRWLT5LY3RRE' # your Foursquare Secret\n",
    "VERSION = '20200406' # Foursquare API version\n",
    "LIMIT = 30\n",
    "radius = 500\n",
    "\n",
    "print('Your credentails:')\n",
    "print('CLIENT_ID: ' + CLIENT_ID)\n",
    "print('CLIENT_SECRET:' + CLIENT_SECRET)\n",
    "print('LIMIT:' + str(LIMIT))\n",
    "print('Radius:' + str(radius))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To look at the restaurants in the nearby areas, we  need to get the categoryID for restaurants for FourSquare API\n",
    "\n",
    "For restaurants ID is 4d4b7105d754a06374d81259"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Neighborhood Latitude</th>\n",
       "      <th>Neighborhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>Venue Latitude</th>\n",
       "      <th>Venue Longitude</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alaknanda</td>\n",
       "      <td>28.529336</td>\n",
       "      <td>77.301976</td>\n",
       "      <td>My spice Kitchen</td>\n",
       "      <td>28.531382</td>\n",
       "      <td>77.294587</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaknanda</td>\n",
       "      <td>28.529336</td>\n",
       "      <td>77.301976</td>\n",
       "      <td>Street foods of India</td>\n",
       "      <td>28.537872</td>\n",
       "      <td>77.295597</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaknanda</td>\n",
       "      <td>28.529336</td>\n",
       "      <td>77.301976</td>\n",
       "      <td>Al-Arabi Restutant</td>\n",
       "      <td>28.537400</td>\n",
       "      <td>77.300300</td>\n",
       "      <td>Afghan Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alaknanda</td>\n",
       "      <td>28.529336</td>\n",
       "      <td>77.301976</td>\n",
       "      <td>Navaratana</td>\n",
       "      <td>28.536710</td>\n",
       "      <td>77.297277</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Alaknanda</td>\n",
       "      <td>28.529336</td>\n",
       "      <td>77.301976</td>\n",
       "      <td>Sagar Ratna</td>\n",
       "      <td>28.524013</td>\n",
       "      <td>77.293296</td>\n",
       "      <td>Restaurant</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighborhood  Neighborhood Latitude  Neighborhood Longitude  \\\n",
       "0    Alaknanda              28.529336               77.301976   \n",
       "1    Alaknanda              28.529336               77.301976   \n",
       "2    Alaknanda              28.529336               77.301976   \n",
       "3    Alaknanda              28.529336               77.301976   \n",
       "4    Alaknanda              28.529336               77.301976   \n",
       "\n",
       "                   Venue  Venue Latitude  Venue Longitude     Venue Category  \n",
       "0       My spice Kitchen       28.531382        77.294587  Indian Restaurant  \n",
       "1  Street foods of India       28.537872        77.295597  Indian Restaurant  \n",
       "2     Al-Arabi Restutant       28.537400        77.300300  Afghan Restaurant  \n",
       "3             Navaratana       28.536710        77.297277  Indian Restaurant  \n",
       "4            Sagar Ratna       28.524013        77.293296         Restaurant  "
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neighbourhoods = data[data['Borough'] == 'South Delhi'].reset_index(drop = True)\n",
    "neighbourhoods = neighbourhoods.dropna(subset = ['latitude'])\n",
    "neighbourhoods = neighbourhoods.dropna(subset = ['longitude'])\n",
    "newdelhi_venues = getNearbyVenues(names = neighbourhoods['Neighborhood'],latitudes=neighbourhoods['latitude'],longitudes=neighbourhoods['longitude'],radius=1000, categoryIds='4d4b7105d754a06374d81259')\n",
    "newdelhi_venues.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
